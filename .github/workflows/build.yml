name: Next.js CI

on:
    push:
        branches:
            - '*'
    pull_request:
        branches:
            - '*'

jobs:
    build:
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:14
                env:
                    POSTGRES_USER: test_user
                    POSTGRES_PASSWORD: test_password
                    POSTGRES_DB: test_db
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd="pg_isready -U test_user"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=3

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: Install dependencies
              run: npm install

            - name: Wait for PostgreSQL
              run: |
                  until pg_isready -h localhost -p 5432 -U test_user; do
                    echo "Waiting for PostgreSQL..."
                    sleep 1
                  done

            - name: Generate prisma
              run: npx prisma generate

            - name: Migrate prisma
              env:
                  DB_URL: postgres://test_user:test_password@localhost:5432/test_db
              run: npx prisma migrate dev

            - name: Setting up cache
              uses: actions/cache@v4
              with:
                  # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
                  path: |
                      ~/.npm
                      ${{ github.workspace }}/.next/cache
                  # Generate a new cache whenever packages or source files change.
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
                  # If source files changed but packages didn't, rebuild from a prior cache.
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

            - name: Next build
              env:
                  DB_URL: postgres://test_user:test_password@localhost:5432/test_db
              run: npm run build
